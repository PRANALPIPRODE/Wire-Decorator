//wire decorator with Property using data table

class
public class AccountHelper {
    @AuraEnabled(cacheable=true)
    public static list<Account> getAccountData(){
        
        return[
            SELECT Id,Name,Industry,Rating
                FROM Account
                WITH USER_MODE
        ];
    }
}
html file
<template>
 <lightning-card title="wire Decorator with Function">
    
    <div style="height: 300px;">
        <lightning-datatable
                key-field="id"
                data={accounts}
                columns={columns}>
        </lightning-datatable>
    </div>
    </lightning-card>   
</template>

js
import { LightningElement,wire } from 'lwc';
import getAccountData from '@salesforce/apex/AccountHelper.getAccountData';
const columns = [
    { label: "Account Name", fieldName: "Name"},
    { label: "Account Industry", fieldName: "Industry" },
    { label: "Account Rating", fieldName: "Rating" }
   
];
export default class WireDecoratorProperty extends LightningElement {
   
    columns = columns;
    @wire(getAccountData) accounts;
    //accounts.data
    //account.error
}

wire decorator with function 
public class AccountHelper {
    @AuraEnabled(cacheable=true)
    public static list<Account> getAccountData(){
    return[ SELECT Id,Name,Industry,Rating
                FROM Account
                WITH USER_MODE
        ];
    }
}

jsfile
import { LightningElement,wire } from 'lwc';
import getAccountData from '@salesforce/apex/AccountHelper.getAccountData';
const columns = [
    { label: "Account Name", fieldName: "Name"},
    { label: "Account Industry", fieldName: "Industry" },
    { label: "Account Rating", fieldName: "Rating" }
   
];
export default class WireDecoratorWithFunction extends LightningElement {
    
    accounts;
    error;
    columns = columns;
    @wire(getAccountData) 
    accountFunction({data, error}){
        if(data){
            console.log(data);
            let updateAccounts = data.map((currItem) =>{ 
                let updateObject ={};
               
                if(!currItem.hasOwnProperty("Rating")){
                    updateObject = {...currItem, Rating:"Warm"};
                }else{
                     updateObject = {...currItem};
                }
                return updateObject;
            });
            console.log("updateAccounts",updateAccounts);
            this.accounts = [...updateAccounts];
            this.error = null;
        }else if(error){
            console.log(error);
            this.error=error;
            this.accounts=null;
        }
    }
}
